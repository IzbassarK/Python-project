import tkinter as tk
from tkinter import Frame, Label, Entry, Button, Listbox, END, Toplevel, Canvas
from tkmacosx import Button as macosxButton
from PIL import Image, ImageTk
import sqlite3

class Person:
    def __init__(self, first_name, last_name, phone, email, company):
        self.first_name = first_name
        self.last_name = last_name
        self.phone = phone
        self.email = email
        self.company = company

class NameList:
    def __init__(self, name_array=None):
        self.names = []
        if name_array:
            self.names = [Person(*contact) for contact in name_array]

    def add(self, person):
        self.names.append(person)

    def delete(self, index):
        self.names.pop(index)

class DButton(macosxButton):
    def __init__(self, master=None, **kwargs):
        super().__init__(master, **kwargs)
        self.configure(bg= "#b3003b", fg='white',  padx=10, pady=5, width=200, height=40, font=('Berlin Sans FB', 18, 'bold'))

    def enable(self):
        self['state'] = tk.NORMAL

    def disable(self):
        self['state'] = tk.DISABLED


class BlueLabel(Label):
    def __init__(self, root, text):
        super().__init__(root, text=text, fg='black', bg='#ffffff', font=('Berlin Sans FB', 15, 'bold'))

class Mediator:
    def __init__(self, listbox, root):
        self.listbox = listbox
        self.root = root
        self.nameList = None
        self.entries = None
        self.clear = None
        self.add = None
        self.update = None
        self.delete = None
        self.reset = None
        self.curindex = None

    def back_to_main(self):
        self.root.destroy()
        root.deiconify()
    def set_entries(self, fn_entry, ln_entry, ph_entry, email_entry, comp_entry):
        self.fnEntry = fn_entry
        self.lnEntry = ln_entry
        self.phEntry = ph_entry
        self.email_entry = email_entry
        self.comp_entry = comp_entry

    def set_name_list(self, name_list):
        self.nameList = name_list

    def set_buttons(self, clear, add, update, delete, reset):
        self.clear = clear
        self.add = add
        self.update = update
        self.delete = delete
        self.reset = reset
        self.delete.disable()
        self.update.disable()

    def refresh_list(self):
        self.listbox.delete(0, tk.END)
        for person in self.nameList.names:
            self.listbox.insert(tk.END, f"{person.first_name} {person.last_name} - {person.phone} - {person.email} - {person.company}")

    def list_clicked(self, evt):
        index = self.listbox.curselection()
        if index:
            i = int(index[0])
            self.curindex = i
            person = self.nameList.names[i]
            self.clear_fields()
            self.fnEntry.insert(tk.END, person.first_name)
            self.lnEntry.insert(tk.END, person.last_name)
            self.phEntry.insert(tk.END, person.phone)
            self.email_entry.insert(tk.END, person.email)
            self.comp_entry.insert(tk.END, person.company)
            self.delete.enable()
            self.update.enable()

    def clear_fields(self):
        self.fnEntry.delete(0, tk.END)
        self.lnEntry.delete(0, tk.END)
        self.phEntry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.comp_entry.delete(0, tk.END)

    def clear_fn(self):
        self.clear_fields()
        self.listbox.selection_clear(0, tk.END)
        self.delete.disable()
        self.update.disable()

    def add_name(self):
        first_name = self.fnEntry.get()
        last_name = self.lnEntry.get()
        phone = self.phEntry.get()
        email = self.email_entry.get()
        company = self.comp_entry.get()
        if first_name and last_name and phone and email and company:
            person = Person(first_name, last_name, phone, email, company)
            self.nameList.add(person)
            self.refresh_list()
            self.clear_fn()

    def update_person(self):
        if self.curindex is not None:
            person = self.nameList.names[self.curindex]
            person.first_name = self.fnEntry.get()
            person.last_name = self.lnEntry.get()
            person.phone = self.phEntry.get()
            person.email = self.email_entry.get()
            person.company = self.comp_entry.get()
            self.refresh_list()
            self.clear_fn()

    def delete_person(self):
        if self.curindex is not None:
            person = self.nameList.names[self.curindex]
            self.nameList.delete(self.curindex)
            self.refresh_list()
            self.clear_fn()

            connection = sqlite3.connect("contacts.db")
            cursor = connection.cursor()

            cursor.execute('''
                DELETE FROM contacts
                WHERE first_name = ? AND last_name = ? AND phone = ? AND email = ? AND company = ?
            ''', (person.first_name, person.last_name, person.phone, person.email, person.company))

            connection.commit()
            connection.close()

    def reset_names(self):
        self.nameList = NameList()
        self.refresh_list()
        self.clear_fn()

    def save_to_database(self, db_path):
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS contacts (
                first_name TEXT,
                last_name TEXT,
                phone TEXT,
                email TEXT,
                company TEXT
            )
        ''')
        cursor.execute('DELETE FROM contacts')

        for person in self.nameList.names:
            cursor.execute('''
                INSERT INTO contacts VALUES (?, ?, ?, ?, ?)
            ''', (person.first_name, person.last_name, person.phone, person.email, person.company))

        connection.commit()
        connection.close()

    def load_from_database(self, db_path):
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS contacts (
                first_name TEXT,
                last_name TEXT,
                phone TEXT,
                email TEXT,
                company TEXT
            )
        ''')

        cursor.execute('SELECT * FROM contacts')
        rows = cursor.fetchall()

        connection.close()

        self.nameList = NameList(rows)
        self.refresh_list()
        self.clear_fn()



def create_contact_app():
    root = tk.Tk()

    root.title("Contact List")
    root.geometry("1000x425")
    root.configure(bg="#ffffff")

    fr1 = tk.Frame(root, bg='#ffffff')
    fr1.grid(row=0, column=0, padx=10, pady=1, sticky="nsew")

    fr2 = tk.Frame(root, bg='#ffffff')
    fr2.grid(row=1, column=0, padx=10, pady=1, sticky="nsew")

    lbox = Listbox(root, height=25, width=60, bd=1, relief=tk.GROOVE, highlightbackground='#ff0000')
    lbox.grid(row=0, column=1, rowspan=2, padx=10, pady=10, sticky="nsew")

    root.grid_rowconfigure(0, weight=1)
    root.grid_rowconfigure(1, weight=1)
    root.grid_columnconfigure(0, weight=1)
    root.grid_columnconfigure(1, weight=1)

    nmList = NameList()

    university_name_label = tk.Label(root, text="De Montfort University Kazakhstan", font=('Berlin Sans FB', 18, 'bold'), bg='#ffffff')
    university_name_label.grid(row=4, column=0, sticky="nw", padx=10, pady=10)

    lb1 = BlueLabel(fr1, "First Name")
    lb1.grid(row=1, column=0, sticky="E", pady=5, padx=8)
    fn_entry = Entry(fr1, width=30, bg='#ffffff')
    fn_entry.grid(row=1, column=1, sticky="W", padx=8, pady=5)


    lb2 = BlueLabel(fr1, "Last Name")
    lb2.grid(row=2, column=0, sticky="E", pady=5, padx=8)
    ln_entry = Entry(fr1, width=30, bg='#ffffff')
    ln_entry.grid(row=2, column=1, sticky="W", padx=8, pady=5)

    lb3 = BlueLabel(fr1, "Phone")
    lb3.grid(row=3, column=0, sticky="E", pady=5, padx=8)
    phnentry = Entry(fr1, width=30, bg='#ffffff')
    phnentry.grid(row=3, column=1, sticky="W", padx=8, pady=5)

    lb4 = BlueLabel(fr1, "Email")
    lb4.grid(row=4, column=0, sticky="E", pady=5, padx=8)
    email_entry = Entry(fr1, width=30, bg='#ffffff')
    email_entry.grid(row=4, column=1, sticky="W", padx=8, pady=5)

    lb5 = BlueLabel(fr1, "Company")
    lb5.grid(row=5, column=0, sticky="E", pady=5, padx=8)
    comp_entry = Entry(fr1, width=30, bg='#ffffff')
    comp_entry.grid(row=5, column=1, sticky="W", padx=8, pady=5)

    med = Mediator(lbox, root)
    med.set_entries(fn_entry, ln_entry, phnentry, email_entry, comp_entry)
    med.set_name_list(nmList)
    lbox.bind("<<ListboxSelect>>", med.list_clicked)
    med.refresh_list()

    clrButton = DButton(fr2, text="Clear", command=med.clear_fn)
    clrButton.grid(row=4, column=0,pady=1,  sticky="ew")

    addButton = DButton(fr2, text="Add", command=med.add_name)
    addButton.grid(row=4, column=1,pady=1, sticky="ew")

    updateButton = DButton(fr2, text="Update", command=med.update_person)
    updateButton.grid(row=5, column=0,pady=1, sticky="ew")

    deleteButton = DButton(fr2, text="Delete", command=med.delete_person)
    deleteButton.grid(row=5, column=1, pady=1, sticky="ew")

    resetButton = DButton(fr2, text="Reset", command=med.reset_names)
    resetButton.grid(row=8, column=1, pady=1, sticky="ew")

    saveButton = DButton(fr2, text="Save to Database", command=lambda: med.save_to_database("contacts.db"))
    saveButton.grid(row=7, column=0, pady=1, sticky="ew")

    loadButton = DButton(fr2, text="Load from Database", command=lambda: med.load_from_database("contacts.db"))
    loadButton.grid(row=7, column=1, pady=1, sticky="ew")

    back_to_main_button = DButton(fr2, text="Back to Main Page", command=med.back_to_main)
    back_to_main_button.grid(row=8, column=0, columnspan=2, sticky="sw", pady=1)

    root.mainloop()

class ContactsPage:
    def __init__(self, master):
        self.master = master
        self.master.title("Info Page")
        self.master.geometry("500x300")
        self.master.configure(bg='#ffffff')

        label1 = tk.Label(master, text="Address: 120/48 Al-Farabi Avenue, Almaty 050044", bg='#ffffff', font=('Berlin Sans FB', 16, 'bold'))
        label1.pack(pady=10)

        label2 = tk.Label(master, text="Phone Number:  8 (727) 339 0090", bg='#ffffff', font=('Berlin Sans FB', 16, 'bold'))
        label2.pack(pady=10)

        label3 = tk.Label(master, text="Email: https://dmuk.edu.kz/", bg='#ffffff', font=('Berlin Sans FB', 16, 'bold'))
        label3.pack(pady=10)

        label4 = tk.Label(master, text="Business Hours: 09.00-18.00", bg='#ffffff', font=('Berlin Sans FB', 16, 'bold'))
        label4.pack(pady=10)

        btn_back = DButton(master, text="Back to Main Page", command=self.back_to_main_page)
        btn_back.pack(pady=10)

    def back_to_main_page(self):
        self.master.destroy()
        root.deiconify()

class StartPage:
    def __init__(self, master):
        self.master = master
        self.master.title("App")
        self.master.geometry("400x300")
        self.master.configure(bg='#ffffff')

        dmuk_image = Image.open("dmuk.png")
        dmuk_image = dmuk_image.resize((90, 90))
        dmuk_photo = ImageTk.PhotoImage(dmuk_image)

        logo_label = tk.Label(master, image=dmuk_photo, bg='#ffffff')
        logo_label.photo = dmuk_photo
        logo_label.pack(side=tk.TOP, padx=10, pady=10)

        btn_create = DButton(master, text="Create New Contact", command=self.open_contact_app)
        btn_create.pack(pady=10, padx=10, expand=True, fill=tk.X)

        btn_contacts = DButton(master, text="Contact Us", command=self.open_contacts_page)
        btn_contacts.pack(pady=10, padx=10, expand=True, fill=tk.X)

        btn_exit = DButton(master, text="Exit", command=master.destroy)
        btn_exit.pack(pady=10, padx=10, expand=True, fill=tk.X)

        self.main_instance = None

    def open_contact_app(self):
        self.master.iconify()
        create_contact_app()

    def open_contacts_page(self):
        self.master.iconify()
        contacts_window = tk.Toplevel(self.master)
        ContactsPage(contacts_window)

if __name__ == "__main__":
    root = tk.Tk()
    app = StartPage(root)
    root.mainloop()
